---
openapi: 3.0.3
servers:
  - url: http://127.0.0.1:3200
info:
  title: Movie API
  summary: This is the API of the Movie service
  description: This is the API of the Movie service, it should be much much much much much much much much much much much much much much much much much much much much much longer
  contact:
    name: Helene Coullon
    url: https://helene-coullon.fr/
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /:
    get:
      tags:
      - developers
      summary: home page of the service
      description: |
        Nothing to do
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1 style='color:blue'>Welcome to the Movie service!</h1>
  /json:
    get:
      tags:
      - developers
      summary: get the full JSON database
      description: |
        Nothing to do
      operationId: get_json
      responses:
        "200":
          description: full JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllMovies'
  /movies/rate:
    get:
      tags:
        - developers
      summary: Get all movies ordered by rating
      description: Retrieve all movies ordered by their rating, either from best to worst or from worst to best.
      operationId: get_movies_by_rate
      parameters:
        - name: rate
          in: query
          description: Specify the ordering of movies by rating. Use 'best' for descending order and 'worst' for ascending order.
          required: true
          style: form
          explode: true
          schema:
            type: string
            enum:
              - best
              - worst
      responses:
        "200":
          description: All movies ordered by rating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllMovies'
        "400":
          description: Invalid or missing 'rate' parameter
  /addmovie/{movieid}:
    post:
      tags:
        - admins
      summary: Add a new movie
      description: Adds a new movie to the database using a specific ID. The movie information should be passed in the request body as JSON.
      operationId: add_movie
      parameters:
        - name: movieid
          in: path
          description: Movie ID (unique identifier for the movie).
          required: true
          schema:
            type: string
      requestBody:
        description: Movie object to be added
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "12345"
                title:
                  type: string
                  example: "The Matrix"
                director:
                  type: string
                  example: "Wachowski Brothers"
                rating:
                  type: integer
                  example: 9
              required:
                - id
                - title
                - director
                - rating
      responses:
        "200":
          description: Movie added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "movie added"
        "409":
          description: A movie with the same ID already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "movie ID already exists"

  /movies/{movieid}:
    get:
      tags:
      - developers
      summary: get the movie by its id
      description: By passing in the appropriate options, you can get info of a Movie
      operationId: get_movie_byid
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Movie description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "400":
          description: bad input parameter
    post:
      tags:
      - admins
      summary: add a movie item
      description: Adds a movie to the system
      operationId: create_movie
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieItem'
      responses:
        "200":
          description: Movie created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "409":
          description: an existing item already exists
    delete:
      tags:
      - admins
      summary: delete a movie item
      description: Adds a movie to the system
      operationId: del_movie
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: item deleted
        "400":
          description: ID not found
  /moviebytitle:
    get:
      tags:
        - developers
      summary: get the movie by its title
      description: |
        By passing in the appropriate options, you can get Movie info
      operationId: get_movie_bytitle
      parameters:
        - name: title
          in: query
          description: pass a title
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Movie item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "400":
          description: bad input parameter
  /moviesbydirector:
    get:
      tags:
        - developers
      summary: Get movies by director
      description: |
        By passing in the appropriate options, you can get Movie info
      operationId: get_movie_bydirector
      parameters:
        - name: director
          in: query
          description: Specify the name of the director to get all movies directed by them.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Movie item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieItem'
        "400":
          description: bad input parameter
  /movies/{movieid}/{rate}:
    put:
      tags:
      - admins
      summary: update a movie rate
      description: update the rating of a movie
      operationId: update_movie_rating
      parameters:
      - name: movieid
        in: path
        description: Movie ID.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rate
        in: path
        description: Movie rating.
        required: true
        style: simple
        explode: false
        schema:
          maximum: 10
          minimum: 0
          type: integer
      responses:
        "200":
          description: rate updated
        "400":
          description: movie ID not found
  /help:
    get:
      tags:
        - developers
      summary: Get a list of all available endpoints
      description: Retrieve a list of all the endpoints available in this Movie service API with their methods and summaries.
      operationId: get_help
      responses:
        "200":
          description: List of all API endpoints with their methods and summaries
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoints:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                          example: "/movies/{movieid}"
                        method:
                          type: string
                          example: "GET"
                        summary:
                          type: string
                          example: "Get a movie by its ID"
                example:
                  endpoints:
                    - url: "/"
                      method: "GET"
                      summary: "Home page of the service"
                    - url: "/json"
                      method: "GET"
                      summary: "Get the full JSON database"
                    - url: "/movies/rate"
                      method: "GET"
                      summary: "Get all movies ordered by rating"
                    - url: "/movies/{movieid}"
                      method: "GET"
                      summary: "Get a movie by its ID"
                    - url: "/moviebytitle"
                      method: "GET"
                      summary: "Get a movie by its title"
                    - url: "/moviesbydirector"
                      method: "GET"
                      summary: "Get all movies by a specific director"

components:
  schemas:
    AllMovies:
      type: object
      required:
        - movies
      properties:
        movies:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/MovieItem'
    MovieItem:
      type: object
      required:
        - title
        - rating
        - director
        - id
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: integer
          example: 7
        director:
          type: string
          example: Paul McGuigan
        id:
          type: string
          example: 39ab85e5-5e8e-4dc5-afea-65dc368bd7ab


